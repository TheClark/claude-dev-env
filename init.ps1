# Claude Code Docker Environment - Initialization Script
# This script guides you through setting up the environment

$ErrorActionPreference = "Stop"

Write-Host ""
Write-Host ">> Claude Code Docker Environment Setup" -ForegroundColor Cyan
Write-Host "=======================================" -ForegroundColor Cyan
Write-Host ""

# Welcome message
Write-Host "Welcome! This script will help you set up Claude Code in Docker." -ForegroundColor Green
Write-Host "You'll need:" -ForegroundColor White
Write-Host "  * Docker Desktop installed and running" -ForegroundColor Gray
Write-Host "  * Your project path" -ForegroundColor Gray
Write-Host "  * GitHub token (optional)" -ForegroundColor Gray
Write-Host "  * Anthropic API key (optional)" -ForegroundColor Gray
Write-Host ""

# Check Docker
Write-Host ">> Checking Docker..." -ForegroundColor Yellow
try {
    docker version | Out-Null
    Write-Host "[OK] Docker is running" -ForegroundColor Green
} catch {
    Write-Host "[ERROR] Docker is not running!" -ForegroundColor Red
    Write-Host "Please start Docker Desktop and run this script again." -ForegroundColor Red
    Read-Host "Press Enter to exit"
    exit 1
}

Write-Host ""

# Get project information
Write-Host ">> PROJECT SETUP" -ForegroundColor Yellow
Write-Host "===============" -ForegroundColor Yellow

# Project name
$projectName = Read-Host "Project name (for container naming, lowercase/no spaces)"
if (-not $projectName) {
    $projectName = "my-project"
}
$projectName = $projectName.ToLower() -replace '[^a-z0-9\-]', '-'

# Project path
Write-Host ""
Write-Host "Where is your project code located?" -ForegroundColor White
Write-Host "Examples:" -ForegroundColor Gray
Write-Host "  C:\Users\YourName\Projects\MyProject" -ForegroundColor Gray
Write-Host "  D:\Development\MyApp" -ForegroundColor Gray
Write-Host "  .. (parent directory)" -ForegroundColor Gray
Write-Host ""

do {
    $projectPath = Read-Host "Project path"
    
    if ($projectPath -match '^\.\.?') {
        # Relative path
        $resolvedPath = Resolve-Path $projectPath -ErrorAction SilentlyContinue
        if ($resolvedPath) {
            $projectPath = $resolvedPath.Path
            Write-Host "[OK] Resolved to: $projectPath" -ForegroundColor Green
            break
        } else {
            Write-Host "[ERROR] Could not resolve relative path" -ForegroundColor Red
        }
    } elseif (Test-Path $projectPath) {
        Write-Host "[OK] Path exists" -ForegroundColor Green
        break
    } else {
        Write-Host "[ERROR] Path does not exist: $projectPath" -ForegroundColor Red
        Write-Host "Please enter a valid path or create the directory first." -ForegroundColor Red
    }
} while ($true)

# Git configuration
Write-Host ""
Write-Host ">> GIT CONFIGURATION" -ForegroundColor Yellow
Write-Host "===================" -ForegroundColor Yellow

$gitName = Read-Host "Your name (for git commits)"
if (-not $gitName) {
    $gitName = "Claude User"
}

$gitEmail = Read-Host "Your email (for git commits)"
if (-not $gitEmail) {
    $gitEmail = "claude@example.com"
}

# API Keys
Write-Host ""
Write-Host ">> API KEYS (Optional)" -ForegroundColor Yellow
Write-Host "=====================" -ForegroundColor Yellow
Write-Host "These are optional but recommended for full functionality." -ForegroundColor Gray
Write-Host ""

Write-Host "GitHub Personal Access Token:" -ForegroundColor White
Write-Host "  • Get from: https://github.com/settings/tokens" -ForegroundColor Gray
Write-Host "  • Required permissions: repo, workflow" -ForegroundColor Gray
Write-Host "  • Leave blank to skip" -ForegroundColor Gray
$githubToken = Read-Host "GitHub token"

Write-Host ""
Write-Host "Anthropic API Key:" -ForegroundColor White
Write-Host "  • Get from: https://console.anthropic.com/" -ForegroundColor Gray
Write-Host "  • Required for Claude Code to work" -ForegroundColor Gray
Write-Host "  • Leave blank to configure later" -ForegroundColor Gray
$anthropicKey = Read-Host "Anthropic API key"

# Resource limits
Write-Host ""
Write-Host ">> RESOURCE SETTINGS" -ForegroundColor Yellow
Write-Host "====================" -ForegroundColor Yellow
Write-Host "Universal container includes Python, Node.js, Java, .NET, Go, and more!" -ForegroundColor Green
Write-Host ""

$cpuLimit = Read-Host "CPU cores to allocate (default: 6)"
if (-not $cpuLimit) {
    $cpuLimit = "6"
}

$memoryLimit = Read-Host "Memory limit in GB (default: 12)"
if (-not $memoryLimit) {
    $memoryLimit = "12"
}
$memoryLimit = $memoryLimit + "G"

# Create .env file
Write-Host ""
Write-Host ">> Creating configuration file..." -ForegroundColor Yellow

$envContent = @"
# Claude Code Docker Environment Configuration
# Generated by init script on $(Get-Date)

# ===== PROJECT SETTINGS =====
PROJECT_NAME=$projectName
PROJECT_PATH=$projectPath

# ===== GIT CONFIGURATION =====
GIT_USER_NAME=$gitName
GIT_USER_EMAIL=$gitEmail

# ===== API KEYS =====
GITHUB_TOKEN=$githubToken
ANTHROPIC_API_KEY=$anthropicKey

# ===== RESOURCE LIMITS =====
CPU_LIMIT=$cpuLimit
MEMORY_LIMIT=$memoryLimit

# ===== ADVANCED SETTINGS =====
EXPOSED_PORTS=3000,5000,8000,8080,9000
DOCKER_BUILDKIT=1
"@

$envContent | Out-File -FilePath ".env" -Encoding UTF8
Write-Host "[OK] Configuration saved to .env" -ForegroundColor Green

# Summary
Write-Host ""
Write-Host ">> SETUP SUMMARY" -ForegroundColor Yellow
Write-Host "================" -ForegroundColor Yellow
Write-Host "Project: $projectName" -ForegroundColor White
Write-Host "Path: $projectPath" -ForegroundColor White
Write-Host "Git User: $gitName <$gitEmail>" -ForegroundColor White
if ($githubToken) {
    Write-Host "GitHub: Configured" -ForegroundColor Green
} else {
    Write-Host "GitHub: Not configured" -ForegroundColor Gray
}
if ($anthropicKey) {
    Write-Host "Claude API: Configured" -ForegroundColor Green
} else {
    Write-Host "Claude API: Not configured" -ForegroundColor Red
}
Write-Host "Resources: $cpuLimit CPU cores, $memoryLimit RAM" -ForegroundColor White

Write-Host ""
Write-Host ">> NEXT STEPS" -ForegroundColor Yellow
Write-Host "=============" -ForegroundColor Yellow
Write-Host "1. Review your .env file if needed" -ForegroundColor White
Write-Host "2. Run the start script:" -ForegroundColor White
Write-Host "   .\scripts\start-claude.ps1" -ForegroundColor Cyan
Write-Host ""

# Ask if they want to start now
$startNow = Read-Host "Start Claude Code now? (y/N)"
if ($startNow -eq "y" -or $startNow -eq "Y" -or $startNow -eq "yes") {
    Write-Host ""
    Write-Host ">> Starting Claude Code..." -ForegroundColor Green
    .\scripts\start-claude.ps1
} else {
    Write-Host ""
    Write-Host "[OK] Setup complete! Run .\scripts\start-claude.ps1 when ready." -ForegroundColor Green
    Write-Host ""
}